From fa3d98cd242a0e7f3553b77138e032d1a653bae2 Mon Sep 17 00:00:00 2001
From: Gravit'a <gravita@gravit.pro>
Date: Thu, 19 May 2016 19:33:31 +0200
Subject: [PATCH] Using Authlib

- Fix start with GravitLauncher
- Using mojang authlib

diff --git a/proxy/pom.xml b/proxy/pom.xml
index f0c36550..8d8a967b 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -22,6 +22,13 @@
         <maven.deploy.skip>true</maven.deploy.skip>
         <maven.javadoc.skip>true</maven.javadoc.skip>
     </properties>
+    
+    <repositories>
+        <repository>
+            <id>mojang</id>
+            <url>https://libraries.minecraft.net/</url>
+        </repository>
+    </repositories>
 
     <dependencies>
         <dependency>
@@ -113,6 +120,17 @@
             <scope>runtime</scope>
         </dependency>
         <!-- Waterfall end -->
+        <dependency>
+            <groupId>com.mojang</groupId>
+            <artifactId>authlib</artifactId>
+            <version>1.5.25</version>
+			 <exclusions>
+				<exclusion>
+					<groupId>org.apache.logging.log4j</groupId>
+					<artifactId>log4j-api</artifactId>
+				</exclusion>
+			 </exclusions>
+        </dependency>
     </dependencies>
 
     <build>
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/AuthServiceSingleton.java b/proxy/src/main/java/net/md_5/bungee/connection/AuthServiceSingleton.java
new file mode 100644
index 00000000..a518c46c
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/connection/AuthServiceSingleton.java
@@ -0,0 +1,12 @@
+package net.md_5.bungee.connection;
+
+import java.net.Proxy;
+import java.util.UUID;
+
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+
+public class AuthServiceSingleton {
+	public static YggdrasilAuthenticationService authService = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
+	public static MinecraftSessionService sessionService = authService.createMinecraftSessionService();
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index ea7614c5..f272ec29 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -2,8 +2,14 @@ package net.md_5.bungee.connection;
 
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
 import com.google.gson.Gson;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import net.md_5.bungee.connection.LoginResult.Property;
 import java.math.BigInteger;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.URLEncoder;
@@ -434,10 +440,38 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         }
         String encodedHash = URLEncoder.encode( new BigInteger( sha.digest() ).toString( 16 ), "UTF-8" );
 
-        String preventProxy = ( BungeeCord.getInstance().config.isPreventProxyConnections() && getSocketAddress() instanceof InetSocketAddress ) ? "&ip=" + URLEncoder.encode( getAddress().getAddress().getHostAddress(), "UTF-8" ) : "";
-        String authURL = String.format( MOJANG_AUTH_URL, encName, encodedHash, preventProxy );
-
-        Callback<String> handler = new Callback<String>()
+        InetAddress preventProxy =  BungeeCord.getInstance().config.isPreventProxyConnections() ? getAddress().getAddress() : null;
+        //String authURL = "https://sessionserver.mojang.com/session/minecraft/hasJoined?username=" + encName + "&serverId=" + encodedHash + preventProxy;
+        (new Thread("User Authenticator") {
+			public void run() {
+				try {
+					GameProfile filledInProfile = AuthServiceSingleton.sessionService
+							.hasJoinedServer(new GameProfile(null, InitialHandler.this.getName()), encodedHash, preventProxy);
+					if (filledInProfile == null) {
+						disconnect(bungee.getTranslation("offline_mode_player"));
+					}
+
+					List<Property> props = Lists.newArrayList();
+
+					for (com.mojang.authlib.properties.Property prop : filledInProfile.getProperties().values()) {
+						props.add(new Property(prop.getName(), prop.getValue(), prop.getSignature()));
+					}
+
+					LoginResult loginResult = new LoginResult(filledInProfile.getId().toString().replaceAll("-", ""),
+							filledInProfile.getName(), props.toArray(new Property[props.size()]));
+
+					loginProfile = loginResult;
+					name = loginResult.getName();
+					uniqueId = Util.getUUID(loginResult.getId());
+					finish();
+					return;
+				} catch (AuthenticationUnavailableException e) {
+					disconnect(bungee.getTranslation("mojang_fail"));
+				}
+			}
+		}).start();
+
+        /*Callback<String> handler = new Callback<String>()
         {
             @Override
             public void done(String result, Throwable error)
@@ -462,7 +496,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             }
         };
 
-        HttpClient.get( authURL, ch.getHandle().eventLoop(), handler );
+        HttpClient.get( authURL, ch.getHandle().eventLoop(), handler );*/
     }
 
     private void finish()
